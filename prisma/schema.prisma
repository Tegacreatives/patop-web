// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now()) @map(name: "created_at")
  updatedAt      DateTime  @updatedAt @map(name: "updated_at")
  school         String?

  projects Project[]
  accounts Account[]
  comments Comment[]
  sessions Session[]

  @@map(name: "users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id            String         @id @default(cuid())
  title         String
  description   String?
  imageSrc      String
  goalAmount    Float
  endDate       DateTime
  createdAt     DateTime       @default(now())
  category      String
  userId        String
  contributions Contribution[]
  comments      Comment[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contribution {
  id               String   @id @default(cuid())
  backerId         String
  projectId        String
  amount           Float
  contributionDate DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id])
}

model Comment {
  id          String   @id @default(cuid())
  userId      String
  projectId   String
  commentText String
  commentDate DateTime

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
}
